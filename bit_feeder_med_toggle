library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity bit_feeder is
    Port (
        clk        : in  std_logic;
        reset      : in  std_logic;
        bit_out    : out std_logic;
        strobe_out : out std_logic
    );
end entity;

architecture bit_feeder_arch of bit_feeder is

    constant ROM_SIZE : integer := 1024;

    type rom_type is array (0 to ROM_SIZE - 1) of std_logic_vector(1 downto 0);
    constant rom : rom_type := (
		0 => "00", 1 => "00", 2 => "00", 3 => "00", 4 => "00", 5 => "00", 6 => "00", 7 => "00", 8 => "00", 9 => "00", 10 => "00", 11 => "00", 12 => "00", 13 => "00", 14 => "00", 15 => "00", 16 => "00", 17 => "00", 18 => "00", 19 => "00", 20 => "00", 21 => "00", 22 => "00", 23 => "00", 24 => "00", 25 => "00", 26 => "00", 27 => "00", 28 => "00", 29 => "00", 30 => "00", 31 => "00", 32 => "00", 33 => "00", 34 => "00", 35 => "00", 36 => "00", 37 => "00", 38 => "00", 39 => "00", 40 => "00", 41 => "00", 42 => "00", 43 => "00", 44 => "00", 45 => "00", 46 => "00", 47 => "00", 48 => "00", 49 => "00", 50 => "00", 51 => "00", 52 => "00", 53 => "00", 54 => "00", 55 => "00", 56 => "00", 57 => "00", 58 => "00", 59 => "00", 60 => "00", 61 => "00", 62 => "00", 63 => "00", 64 => "00", 65 => "00", 66 => "00", 67 => "00", 68 => "00", 69 => "00", 70 => "00", 71 => "00", 72 => "00", 73 => "00", 74 => "00", 75 => "00", 76 => "00", 77 => "00", 78 => "00", 79 => "00", 80 => "00", 81 => "00", 82 => "00", 83 => "00", 84 => "00", 85 => "00", 86 => "00", 87 => "00", 88 => "00", 89 => "00", 90 => "00", 91 => "00", 92 => "00", 93 => "00", 94 => "00", 95 => "00", 96 => "00", 97 => "00", 98 => "00", 99 => "00", 100 => "00", 101 => "00", 102 => "00", 103 => "00", 104 => "01", 105 => "11", 106 => "10", 107 => "11", 108 => "01", 109 => "11", 110 => "01", 111 => "00", 112 => "10", 113 => "11", 114 => "10", 115 => "11", 116 => "01", 117 => "11", 118 => "01", 119 => "00", 120 => "10", 121 => "11", 122 => "10", 123 => "11", 124 => "01", 125 => "11", 126 => "01", 127 => "00", 128 => "10", 129 => "11", 130 => "10", 131 => "11", 132 => "01", 133 => "11", 134 => "01", 135 => "00", 136 => "10", 137 => "11", 138 => "10", 139 => "11", 140 => "01", 141 => "11", 142 => "01", 143 => "00", 144 => "10", 145 => "11", 146 => "01", 147 => "00", 148 => "10", 149 => "00", 150 => "01", 151 => "11", 152 => "01", 153 => "00", 154 => "10", 155 => "00", 156 => "01", 157 => "00", 158 => "01", 159 => "11", 160 => "01", 161 => "11", others => "00"    );

    signal address			: integer range 0 to ROM_SIZE - 1 := 0;

begin
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                address     		<= 0;
            else
                bit_out		<= rom(address)(1);
					 strobe_out	<= rom(address)(0);
                address		<= address + 1;
            end if;
        end if;
    end process;
end architecture;









