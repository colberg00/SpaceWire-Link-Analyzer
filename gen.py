{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "37de6e3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ascii_to_bits(character):\n",
    "    \"\"\"Converts a character to its ASCII binary representation.\"\"\"\n",
    "    return ''.join(f\"{ord(character):08b}\")\n",
    "\n",
    "def bits_to_ascii(bits):\n",
    "    \"\"\"Converts an 8-bit binary string back into its ASCII character.\"\"\"\n",
    "    return chr(int(bits, 2))\n",
    "\n",
    "def create_control_character(control_code):\n",
    "    \"\"\"Generates a control character based on the specified control code.\"\"\"\n",
    "    codes = {\n",
    "        \"FCT\": \"00\",\n",
    "        \"EOP\": \"01\",\n",
    "        \"EEP\": \"10\",\n",
    "        \"Escape\": \"11\"\n",
    "    }\n",
    "    if control_code not in codes:\n",
    "        raise ValueError(\"Invalid control code\")\n",
    "    return codes[control_code]\n",
    "\n",
    "def calculate_parity(bits):\n",
    "    \"\"\"Calculates the parity bit for a string of binary bits to ensure odd parity.\"\"\"\n",
    "    return '0' if sum(int(b) for b in bits) % 2 == 1 else '1'\n",
    "\n",
    "def create_data_character(data, parity_bit):\n",
    "    \"\"\"Encodes a data character with an additional parity bit.\"\"\"\n",
    "    data_control_flag = '0'\n",
    "    return f\"{parity_bit}{data_control_flag}{ascii_to_bits(data)}\"\n",
    "\n",
    "def create_null(parity_bit):\n",
    "    \"\"\"Generates a null character for transmission padding.\"\"\"\n",
    "    control_flag = \"1\"\n",
    "    parity_bit = 0\n",
    "    return f\"{parity_bit}{control_flag}{create_control_character('Escape')}0100\"\n",
    "\n",
    "def create_fct(parity_bit):\n",
    "    \"\"\"Generates a frame control character using a specific parity bit.\"\"\"\n",
    "    data_control_flag = \"1\"\n",
    "    return f\"{parity_bit}{data_control_flag}{create_control_character('FCT')}\"\n",
    "\n",
    "def create_time_code(time_code, parity_bit):\n",
    "    \"\"\"Creates a time code character with error checking.\"\"\"\n",
    "    control_character = create_control_character(\"Escape\")\n",
    "    time_code_bits = create_data_character(time_code, calculate_parity(control_character))\n",
    "    return f\"{parity_bit}{control_character}{time_code_bits}\"\n",
    "\n",
    "def create_data_packet(data, address):\n",
    "    \"\"\"Assembles a data packet with a payload and address header.\"\"\"\n",
    "    header = \"\"\n",
    "    parity_field = \"\"\n",
    "\n",
    "    for i, char in enumerate(address):\n",
    "        parity_bit = '0' if i == 0 else calculate_parity(parity_field)\n",
    "        data_character = create_data_character(char, parity_bit)\n",
    "        parity_field = data_character[2:10]  # Extract bits for parity calculation\n",
    "        header += data_character\n",
    "\n",
    "    cargo = \"\"\n",
    "    for char in data:\n",
    "        data_character = create_data_character(char, calculate_parity(parity_field))\n",
    "        cargo += data_character\n",
    "        parity_field = data_character[2:10]\n",
    "\n",
    "    eop = \"1\" + create_control_character(\"EOP\")\n",
    "    eop_field = calculate_parity(parity_field + \"1\") + eop\n",
    "\n",
    "    return header + cargo + eop_field\n",
    "\n",
    "def create_strobe(bits, clock):\n",
    "    \"\"\"Generates a strobe signal by XORing data bits with a clock sequence.\"\"\"\n",
    "    return ''.join(str(int(b) ^ int(c)) for b, c in zip(bits, clock))\n",
    "\n",
    "def create_clock(length):\n",
    "    \"\"\"Creates a clock sequence for synchronization purposes.\"\"\"\n",
    "    return ''.join(str(i % 2) for i in range(length))\n",
    "\n",
    "def save_to_file(data, strobe, reset, filename):\n",
    "    \"\"\"Saves the packet, strobe, and reset data to a file for analysis.\"\"\"\n",
    "    with open(filename, \"w\") as file:\n",
    "        file.writelines(f\"{d}\\t{s}\\t{r}\\n\" for d, s, r in zip(data, strobe, reset))\n",
    "\n",
    "def create_reset_signal(signal_length, reset_position):\n",
    "    '''Create a reset signal for a transmission'''\n",
    "    reset_signal = ['0'] * signal_length\n",
    "    reset_signal[reset_position] = '1'  # Set the reset position to '1'\n",
    "    return ''.join(reset_signal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7af200f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reset Signal: 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
      "Nulls: 0111010001110100011101000111010001110100011101000111010001110100011101000111010001110100\n",
      "FCT: 1100\n",
      "Data Packet: 0001011000000100100010011001011001101100100110110010011011110101\n"
     ]
    }
   ],
   "source": [
    "# Define the address for the packet and sample text to be sent\n",
    "address = \"X\"\n",
    "sample_text = \"Hello\"\n",
    "\n",
    "# Step 1: Send 11 null characters\n",
    "null_transmission = ''.join([create_null(calculate_parity('0')) for _ in range(11)])\n",
    "\n",
    "# Step 2: Send one FCT character\n",
    "fct_character = create_fct(calculate_parity('0'))\n",
    "\n",
    "# Step 3: Send a data packet with sample text\n",
    "data_packet = create_data_packet(sample_text, address)\n",
    "\n",
    "# Combine the transmissions into one complete sequence\n",
    "complete_transmission = null_transmission + fct_character + data_packet\n",
    "\n",
    "# Create a clock for the entire length of the transmission\n",
    "clock_signal = create_clock(len(complete_transmission))\n",
    "\n",
    "# Create a strobe signal for the entire transmission\n",
    "strobe_signal = create_strobe(complete_transmission, clock_signal)\n",
    "\n",
    "# Create a reset signal for the transmission\n",
    "reset_signal = create_reset_signal(len(complete_transmission), 0)\n",
    "print(\"Reset Signal:\", reset_signal)\n",
    "# Create a buffer in beginning of the transmission(Optional)\n",
    "buffer_length = 1\n",
    "buffer = '0' * buffer_length\n",
    "\n",
    "# Add buffer to the beginning of the complete transmission, strobe, and reset signals\n",
    "complete_transmission = buffer + complete_transmission\n",
    "strobe_signal = buffer + strobe_signal\n",
    "reset_signal = buffer + reset_signal\n",
    "\n",
    "# Display the complete transmission, clock, and strobe\n",
    "print(\"Nulls:\", null_transmission)\n",
    "print(\"FCT:\", fct_character)\n",
    "print(\"Data Packet:\", data_packet)\n",
    "\n",
    "\n",
    "# Save the results to a file\n",
    "save_to_file(complete_transmission, strobe_signal, reset_signal, \"complete_transmission_log.txt\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}